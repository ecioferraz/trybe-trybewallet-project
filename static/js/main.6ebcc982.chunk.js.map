{"version":3,"sources":["services/currencyAPI.js","actions/index.js","components/TextInput.jsx","pages/Login.js","components/Header.jsx","components/SelectInput.jsx","data/index.js","components/Expenses.jsx","components/ExpensesTable.jsx","pages/Wallet.js","App.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["currencyAPI","fetch","then","response","json","ok","Promise","resolve","reject","getCurrenciesSuccess","currencies","type","TextInput","this","props","className","labelText","name","value","onChange","placeholder","dataTestId","htmlFor","id","data-testid","Component","defaultProps","Login","state","email","password","handleChange","bind","disableBtn","target","setState","test","length","login","handleInput","to","style","pointerEvents","color","disabled","onClick","href","connect","dispatch","loginAction","Header","totalExpenses","expenses","reduce","total","exchangeRates","currency","ask","toFixed","user","wallet","SelectInput","options","map","key","methods","tags","valueInput","label","descriptionInput","currencyInput","methodInput","tagInput","Expenses","description","method","tag","handleSubmit","handleTextInput","handleSelectInput","event","preventDefault","getExpenses","onSubmit","React","getExpensesAction","ExpensesTable","removeExpense","title","index","split","Number","expense","expenseId","Wallet","a","Object","keys","filter","error","App","exact","path","component","INITIAL_STATE","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6ebcc982.chunk.js","sourcesContent":["const API_URL = 'https://economia.awesomeapi.com.br/json/all';\n\nconst currencyAPI = () => (\n  fetch(API_URL)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default currencyAPI;\n","import currencyAPI from '../services/currencyAPI';\n\n// Coloque aqui suas actions\nexport const LOGIN = 'LOGIN';\nexport const GET_CURRENCIES_SUCCESS = 'GET_CURRENCIES_SUCCESS';\nexport const GET_CURRENCIES_ERROR = 'GET_CURRENCIES_ERROR';\nexport const GET_EXPENSES = 'GET_EXPENSES';\nexport const REMOVE_EXPENSE = 'REMOVE_EXPENSE';\n\nexport const login = (email) => ({\n  type: LOGIN,\n  email,\n});\n\nexport const getCurrenciesSuccess = (currencies) => ({\n  type: GET_CURRENCIES_SUCCESS,\n  currencies,\n});\n\nexport const getCurrenciesError = (error) => ({\n  type: GET_CURRENCIES_ERROR,\n  error,\n});\n\nexport const getExpenses = (expenses) => ({\n  type: GET_EXPENSES,\n  expenses,\n});\n\nexport const removeExpense = (expenseId) => ({\n  type: REMOVE_EXPENSE,\n  expenseId,\n});\n\nexport const fetchAPI = () => async (dispatch) => {\n  try {\n    const response = await currencyAPI();\n    const currencies = Object.keys(response).filter((currency) => currency !== 'USDT');\n    dispatch(getCurrenciesSuccess(currencies));\n  } catch (error) {\n    dispatch(getCurrenciesError(error));\n  }\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class TextInput extends Component {\n  render() {\n    const { className, labelText, type, name, value,\n      onChange, placeholder, dataTestId } = this.props;\n\n    return (\n      <>\n        <label htmlFor={ name }>\n          { labelText }\n          {' '}\n        </label>\n        <input\n          className={ className }\n          type={ type }\n          name={ name }\n          value={ value }\n          onChange={ onChange }\n          id={ name }\n          placeholder={ placeholder }\n          data-testid={ dataTestId }\n        />\n      </>\n    );\n  }\n}\n\nTextInput.propTypes = {\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string,\n  type: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  placeholder: PropTypes.string,\n  dataTestId: PropTypes.string,\n};\n\nTextInput.defaultProps = {\n  labelText: '',\n  placeholder: '',\n  dataTestId: '',\n};\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { login as loginAction } from '../actions';\nimport TextInput from '../components/TextInput';\nimport '../styles/login.css';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.disableBtn = this.disableBtn.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  disableBtn() {\n    const { email, password } = this.state;\n    const MIN_LENGTH = 5;\n\n    const disable = !(/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w\\w+)+$/.test(email)\n      && password.length > MIN_LENGTH);\n      // ref https://stackoverflow.com/questions/43676695/email-validation-react-native-returning-the-result-as-invalid-for-all-the-e\n    return disable;\n  }\n\n  handleInput(dataTestId, placeholder, type, value) {\n    return (\n      <TextInput\n        className=\"login-input\"\n        dataTestId={ dataTestId }\n        htmlFor={ type }\n        placeholder={ placeholder }\n        name={ type }\n        onChange={ this.handleChange }\n        type={ type }\n        value={ value }\n      />\n    );\n  }\n\n  render() {\n    const { email, password } = this.state;\n    const { login } = this.props;\n    return (\n      <>\n        <main className=\"landing-page\">\n          <form className=\"login-form\">\n            <h6 className=\"greetings\">Olá! Faça seu login:</h6>\n            <div className=\"input-container\">\n              { this.handleInput('email-input', 'Email', 'email', email) }\n            </div>\n            <div className=\"input-container\">\n              { this.handleInput('password-input', 'Senha', 'password', password) }\n            </div>\n            <Link\n              to=\"/trybe-trybewallet-project/carteira\"\n              style={ (this.disableBtn()) ? { pointerEvents: 'none' } : null } // ref https://newbedev.com/easier-way-to-to-disable-link-in-react\n            >\n              <button\n                className=\"login-btn\"\n                color=\"primary\"\n                type=\"button\"\n                disabled={ this.disableBtn() }\n                onClick={ () => login({ email }) }\n              >\n                Entrar\n              </button>\n            </Link>\n          </form>\n        </main>\n        <footer className=\"image-credit\">\n          <a href=\"https://www.vecteezy.com/free-vector/finance\">\n            Finance Vectors by Vecteezy\n          </a>\n        </footer>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  login: (email) => dispatch(loginAction(email)),\n});\n\nLogin.propTypes = {\n  login: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport '../styles/header.css';\n\nclass Header extends Component {\n  render() {\n    const { email, expenses } = this.props;\n    const totalExpenses = expenses.reduce((total, { value, exchangeRates, currency }) => {\n      total += value * exchangeRates[currency].ask;\n      return total;\n    }, 0);\n\n    return (\n      <header>\n        <div className=\"logo\">\n          <i className=\"fas fa-cash-register\" />\n          <h1>TrybeWallet</h1>\n        </div>\n        <ul className=\"user-info\">\n          <li data-testid=\"email-field\">{ email }</li>\n          <li data-testid=\"total-field\">\n            { (totalExpenses).toFixed(2) }\n            {' '}\n            BRL\n          </li>\n          {/* <li data-testid=\"header-currency-field\">BRL</li> */}\n        </ul>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = ({ user: { email }, wallet: { expenses } }) => ({\n  email,\n  expenses,\n});\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\n\nexport default class SelectInput extends Component {\n  render() {\n    const { className, labelText, name, value, options, onChange } = this.props;\n    return (\n      <>\n        <label htmlFor={ name }>\n          { labelText }\n          {' '}\n        </label>\n        <select\n          className={ className }\n          type=\"select\"\n          name={ name }\n          value={ value }\n          onChange={ onChange }\n          id={ name }\n        >\n          {options.map((currency) => (\n            <option key={ currency } value={ currency }>{currency}</option>\n          ))}\n        </select>\n      </>\n    );\n  }\n}\n\nSelectInput.propTypes = {\n  className: PropTypes.string.isRequired,\n  labelText: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]).isRequired,\n  onChange: PropTypes.func.isRequired,\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n","export const methods = ['Dinheiro', 'Cartão de crédito', 'Cartão de débito'];\n\nexport const tags = ['Alimentação', 'Lazer', 'Trabalho', 'Transporte', 'Saúde'];\n\nexport const valueInput = {\n  label: 'Valor',\n  type: 'number',\n  name: 'value',\n};\n\nexport const descriptionInput = {\n  label: 'Descrição',\n  type: 'text',\n  name: 'description',\n};\n\nexport const currencyInput = {\n  label: 'Moeda',\n  name: 'currency',\n};\n\nexport const methodInput = {\n  label: 'Método de pagamento',\n  name: 'method',\n};\n\nexport const tagInput = {\n  label: 'Tag',\n  name: 'tag',\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getExpenses as getExpensesAction } from '../actions';\nimport currencyAPI from '../services/currencyAPI';\nimport TextInput from './TextInput';\nimport SelectInput from './SelectInput';\nimport {\n  valueInput,\n  descriptionInput,\n  methods,\n  tags,\n  currencyInput,\n  methodInput,\n  tagInput } from '../data';\nimport '../styles/expenses.css';\n\nclass Expenses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleTextInput = this.handleTextInput.bind(this);\n    this.handleSelectInput = this.handleSelectInput.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { getExpenses } = this.props;\n    const exchangeRates = await currencyAPI();\n    this.setState({ exchangeRates });\n    getExpenses(this.state);\n    this.setState({\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n      exchangeRates: {},\n    });\n  }\n\n  handleTextInput({ label, type, name }, value, onChange) {\n    return (\n      <div>\n        <TextInput\n          className=\"expenses-input\"\n          labelText={ label }\n          name={ name }\n          onChange={ onChange }\n          type={ type }\n          value={ value }\n        />\n      </div>\n    );\n  }\n\n  handleSelectInput({ label, name }, value, options, onChange) {\n    return (\n      <div>\n        <SelectInput\n          className=\"expenses-input select-input\"\n          labelText={ label }\n          name={ name }\n          onChange={ onChange }\n          options={ options }\n          value={ value }\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const { currencies } = this.props;\n    return (\n      <form onSubmit={ this.handleSubmit } className=\"expenses-form input-container\">\n\n        { this.handleTextInput(valueInput, value, this.handleChange)}\n        { this.handleTextInput(descriptionInput, description, this.handleChange) }\n        { this.handleSelectInput(\n          currencyInput, currency, currencies, this.handleChange,\n        ) }\n        { this.handleSelectInput(\n          methodInput, method, methods, this.handleChange,\n        ) }\n        { this.handleSelectInput(\n          tagInput, tag, tags, this.handleChange,\n        ) }\n        <button className=\"expense-btn\" disabled={ !value || !description } type=\"submit\">\n          Adicionar despesa\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet: { currencies } }) => ({ currencies });\n\nconst mapDispatchToProps = (dispatch) => ({\n  getExpenses: (expenses) => dispatch(getExpensesAction(expenses)),\n});\n\nExpenses.propTypes = {\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  getExpenses: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { removeExpense as removeExpenseAction } from '../actions';\nimport '../styles/expensestable.css';\n\nclass ExpensesTable extends Component {\n  render() {\n    const { expenses, removeExpense } = this.props;\n    const titles = ['Descrição', 'Tag', 'Método de pagamento', 'Valor', 'Moeda',\n      'Câmbio utilizado', 'Valor convertido', 'Moeda de conversão', 'Editar/Excluir'];\n    return (\n      <section className=\"table-section\">\n        <table>\n          <thead>\n            <tr>\n              { titles.map((title, index) => <th key={ index }>{ title }</th>)}\n            </tr>\n          </thead>\n          <tbody>\n            { expenses.map(({\n              description, tag, method, currency, value, exchangeRates, id,\n            }) => (\n              <tr key={ id }>\n                <td>{ description }</td>\n                <td>{ tag }</td>\n                <td>{ method }</td>\n                <td>{ value }</td>\n                <td>{ exchangeRates[currency].name.split('/')[0] }</td>\n                <td>{ Number(exchangeRates[currency].ask).toFixed(2) }</td>\n                <td>{ Number(exchangeRates[currency].ask * value).toFixed(2) }</td>\n                <td>Real</td>\n                <td>\n                  {/* <Button type=\"button\" className=\"expenseBtn\">\n                    Editar\n                  </Button> */}\n                  <button\n                    className=\"expense-btn\"\n                    type=\"button\"\n                    data-testid=\"delete-btn\"\n                    onClick={ () => removeExpense(id) }\n                  >\n                    Excluir\n                  </button>\n                </td>\n              </tr>\n            )) }\n          </tbody>\n        </table>\n      </section>\n    );\n  }\n}\n\nconst mapStateToProps = ({ wallet: { expenses } }) => ({ expenses });\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeExpense: (expense) => dispatch(removeExpenseAction(expense)),\n});\n\nExpensesTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object).isRequired,\n  removeExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesTable);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { fetchAPI } from '../actions';\nimport Expenses from '../components/Expenses';\nimport ExpensesTable from '../components/ExpensesTable';\nimport '../styles/wallet.css';\n\nclass Wallet extends React.Component {\n  componentDidMount() {\n    const { currencyAPI } = this.props;\n    currencyAPI();\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <>\n        <main className=\"expenses-page\">\n          <Header />\n          <Expenses />\n          { expenses.length > 0 && <ExpensesTable /> }\n        </main>\n        <footer className=\"image-credit\">\n          <a href=\"https://www.vecteezy.com/free-vector/finance\">Finance Vectors by Vecteezy</a>\n        </footer>\n      </>\n    );\n  }\n}\n\nWallet.propTypes = {\n  currencyAPI: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.any).isRequired,\n};\n\nconst mapStateToProps = ({ wallet: { expenses } }) => ({ expenses });\n\nconst mapDispatchToProps = (dispatch) => ({\n  currencyAPI: () => dispatch(fetchAPI()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/trybe-trybewallet-project/\" component={ Login } />\n      <Route exact path=\"/trybe-trybewallet-project/carteira\" component={ Wallet } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nexport default function user(state = INITIAL_STATE, { type, email }) {\n  switch (type) {\n  case LOGIN:\n    return email;\n  default:\n    return state;\n  }\n}\n","import {\n  GET_CURRENCIES_ERROR,\n  GET_CURRENCIES_SUCCESS,\n  GET_EXPENSES,\n  REMOVE_EXPENSE } from '../actions';\n\n// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  error: null,\n};\n\nexport default function wallet(\n  state = INITIAL_STATE,\n  { type, currencies, expenses, error, expenseId },\n) {\n  switch (type) {\n  case GET_CURRENCIES_SUCCESS:\n    return {\n      ...state,\n      currencies,\n    };\n  case GET_CURRENCIES_ERROR:\n    return {\n      ...state,\n      error,\n    };\n  case GET_EXPENSES:\n    expenses.id = state.expenses.length;\n    return {\n      ...state,\n      expenses: [...state.expenses, expenses],\n    };\n  case REMOVE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter((expense) => expense.id !== expenseId),\n      // ref https://stackoverflow.com/questions/34582678/is-this-the-correct-way-to-delete-an-item-using-redux\n    };\n  default:\n    return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxThunk from 'redux-thunk';\n\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}